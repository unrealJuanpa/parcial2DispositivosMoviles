import 'dart:async';

import 'package:flutter/material.dart';

void main() {
  runApp(MaterialApp(
    debugShowCheckedModeBanner: false,
    home: MyApp(),
  ));
}

class Registro {
  String titulo;
  int valor;
  DateTime fecha;

  Registro({required this.titulo, required this.valor, required this.fecha});
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  List<Registro> registros = [];

  final StreamController<List<Registro>> _streamController =
      StreamController<List<Registro>>();

  @override
  void dispose() {
    // Cerrar el controlador del flujo cuando el widget se elimina
    _streamController.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
        home: Scaffold(
            appBar: AppBar(
              title: Text('CRUD'),
            ),
            body: Center(
                child: Column(children: <Widget>[
              Center(
                child: Text(""),
              ),
              Center(
                child: ElevatedButton(
                    onPressed: () {
                      // _createModal(context);
                      registroModal(context, 'Crear Registro', true, '', 0,
                          DateTime.now());
                    },
                    child: Text("Crear Registro")),
              ),
              Expanded(
                  child: StreamBuilder(
                      stream: _streamController.stream,
                      builder: (context, snapshot) {
                        if (snapshot.hasData) {
                          List<Registro>? regs = snapshot.data;
                          return ListView.builder(
                            itemCount: regs?.length,
                            itemBuilder: (context, index) {
                              return ListTile(
                                title: Text('Dato: ${regs?[index].titulo}'),
                                subtitle: Text('Número: ${regs?[index].valor}'),
                                trailing: Row(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    IconButton(
                                        onPressed: () {},
                                        icon: Icon(Icons.edit)),
                                    IconButton(
                                        onPressed: () {
                                          registros.removeAt(index);
                                          _streamController.add(registros);
                                        },
                                        icon: Icon(Icons.delete)),
                                  ],
                                ),
                                onTap: () {
                                  registroModal(
                                      context,
                                      'Detalles del Registro',
                                      false,
                                      registros[index].titulo,
                                      registros[index].valor,
                                      registros[index].fecha);
                                },
                              );
                            },
                          );
                        } else {
                          // return CircularProgressIndicator();
                          return Text("Sin datos");
                        }
                      }))
            ]))));
  }

  // '', 0, null

  void registroModal(BuildContext context, String cabezal, bool allowedit,
      String titulo, int valor, DateTime fecha) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Center(
            child: Text(cabezal),
          ),
          content: Column(children: [
            Text("Datos del registro"),
            Text(""),
            TextFormField(
              enabled: allowedit,
              initialValue: titulo,
              decoration: InputDecoration(labelText: 'Titulo'),
              onChanged: (value) {
                titulo = value;
              },
            ),
            TextFormField(
              enabled: allowedit,
              initialValue: valor.toString(),
              decoration: InputDecoration(labelText: 'Número'),
              keyboardType: TextInputType.number,
              onChanged: (value) {
                valor = int.tryParse(value) ?? 0;
              },
            ),
            TextFormField(
              enabled: allowedit,
              initialValue: fecha.toString(),
              decoration: InputDecoration(labelText: 'Fecha'),
              keyboardType: TextInputType.datetime,
              onChanged: (value) {
                fecha = DateTime.tryParse(value) ?? DateTime.now();
              },
            ),
          ]),
          actions: <Widget>[
            Visibility(
              visible: allowedit,
              child: TextButton(
                onPressed: () {
                  if (titulo.isNotEmpty && valor != 0 && fecha != null) {
                    registros.add(
                        Registro(titulo: titulo, valor: valor, fecha: fecha!));
                    _streamController.add(registros);
                    Navigator.of(context).pop();
                    print(registros);
                  } else {
                    showDialog(
                      context: context,
                      builder: (BuildContext context) {
                        return AlertDialog(
                          title: Text('Error'),
                          content: Text("Por favor, complete todos los datos"),
                          actions: <Widget>[
                            TextButton(
                              onPressed: () {
                                Navigator.of(context).pop();
                              },
                              child: Text('Cerrar'),
                            ),
                          ],
                        );
                      },
                    );
                  }
                },
                child: Text('Guardar'),
              ),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text('Cancelar'),
            ),
          ],
        );
      },
    );
  }
}
